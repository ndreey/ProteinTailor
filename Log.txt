> 09-10-2022 20:03
Created revTranslate() that reverse translates amino acid sequence to rna sequence with string and codon usage table dictionary.
Tested revTranslate() against https://www.bioinformatics.org/sms2/rev_trans.html and got the same output!



> 09-10-2022 23:45
For the start the plan is to tailor for e_coli.
I therefore used the "average" codon usage table from https://www.genscript.com/tools/codon-frequency-table as standard codon usage table.
For the reason of comparing tailored vs raw.
As there was no download option i had to copy paste and edit. 
I only wanted the codons, aa and fraction. So i manually removed freq and number.
In the end i had this
  TTT
  TTC
  TTA
  TTG	
  F
  F
  L
  L	
  0.59
  0.41
  0.28
  0.29	
I then created a script (standardCUT.py) to create a dictionary in the same format as the python_codon_table package by Edinburgh-Genome-Foundry.
dict{aminoacid:{codon:fraction,codon2;fraction}}
I also added a standard codon usage table for yeast.



> 12-10-2022 09:37
Created transcribe() that transcribes cDNA to mRNA



> 18-10-2022 11:54
Created uniprot_seq() that retrieves the amino acid sequence from Uniprot.org.
It extracts the sequence by requesting the fasta format as a string from uniprot's api.
With a Uniprot accession id one can thus access both SwissProt reviewd or unreviewd sequences.
If one wants the isoform, one must thus enter which isoform of the accession by writing the specific number.

Example: uniprot_seq("Q9JK66", isoform = 4)
It will thus compile accession with isoform to Q9JK66-4 then search through the record.id of the fasta.
sp|Q9JK66|PRKN_RAT
sp|Q9JK66-5|PRKN_RAT
sp|Q9JK66-6|PRKN_RAT
sp|Q9JK66-4|PRKN_RAT    # Match! Will therefore return this amino acid sequence.
sp|Q9JK66-3|PRKN_RAT



> 18-10-2022 13:02
Updated on the revTranslate()
Made the standard CUT's that i created 09-10-2022 available.
The second argument (cut =) can be set as a own CUT dictionary, 1 to access standard e_coli or 2 to access standard yeast.
EXAMPLE: revTranslate(aa_seq, cut = 2) would reverse translate using standard yeast CUT.



> 18-10-2022 16:28
Created the calc_cai() that calculates the codon adaption index (CAI) of sequence by extracting the f(i) and fmax(j) 
from the codon usage table dictionary. 
Tried comparing it but can not understand what format they want the CUT in. 
However, when i use the example CUT at http://genomes.urv.es/CAIcal/.
It does calculate my test seq to 0.75 and calc_cai() calculates it to 0.77. So it seems to be working!



> 19-10-2022 12:00 
Implemented some basic statistics functions such as nucleotide counter and GC content distribution.
Nucleotide counter was easy but GC content distribution across sequence was trickier.
Had to learn how to plot using matplotlib and Seaborn by creating dataframes with numpy and pandas.
But i made it worked, however it needs to be tweaked.
Tweaked in the sense that i need to start asking potential users of this program of what they want to see.
What stats and such.
Ohh, well. For now i have the basic function at least so will be easy to revise it later.



> 19-10-2022 19:37
In an effort to create the codon optimization function i noticed that my test sequenced (mRNA) used codons that e_coli did not use.
I cant just skip that codon and leave it in the sequence, because e_coli wont have the complementary tRNA.
Resulting in a faulty translation.
I therefore need to overlook the whole input handeling of the program.

IDEA:
  User needs to also set taxID for organism input sequence came from.
  That way i can translate it to aa seq and use the aa seq to recive the most optimal codon for that aa.

The codon optimization function worked when input mRNA seq used codons that exist in the target host CUT.
I therefore believe it is time for me to start using object oriented programming and creating a class.
The fundamental functions are working pre tailor.
The tailoring functions can be looked into after.














